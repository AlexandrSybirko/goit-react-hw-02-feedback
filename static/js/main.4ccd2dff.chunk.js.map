{"version":3,"sources":["components/Feedback/Statistics/Statistics.js","components/Feedback/Section/Section.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Notification/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js","components/Feedback/FeedbackOptions/FeedbackOptions.module.css","components/Feedback/Statistics/Statistics.module.css","components/Feedback/Feedback.module.css"],"names":["Statistics","good","neutral","bad","total","positiveFeedback","className","s","list","Section","title","children","FeedbackOptions","options","onFeedbackCounter","map","option","item","type","data-action","onClick","Notification","message","Feedback","state","feedbackCounter","e","currentFeedback","target","dataset","action","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","feedback","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAwBeA,EArBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,iBAA9B,OAGC,qBAAIC,UAAWC,IAAEC,KAAjB,UACI,6BAAI,uCAAUP,EAAV,SACJ,6BAAI,0CAAaC,EAAb,SACJ,6BAAI,sCAASC,EAAT,SACJ,6BAAI,wCAAWC,EAAX,SACJ,6BAAI,oDAAuBC,EAAvB,aCIbI,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,M,gBCuBUC,EAxBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,kBAAZ,OAGpB,oBAAIR,UAAWC,IAAEC,KAAjB,SACKK,EAAQE,KAAI,SAAAC,GAAM,OACrB,wBACEV,UAAWC,IAAEU,KACbC,KAAK,SACLC,cAAaH,EACbI,QAASN,EAJX,SAOGE,GAFIA,SCHEK,EATM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,4BAAIA,K,gBCoESC,E,4MA9DXC,MAAQ,CACVvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGHsB,gBAAkB,SAACC,GACf,IAAMC,EAAkBD,EAAEE,OAAOC,QAAQC,OAEzC,EAAKC,UAAS,SAAAC,GACV,OAAO,eAAGL,EAAkBK,EAAUL,GAAmB,O,EAKjEM,mBAAqB,WAAO,IAAD,EACQ,EAAKT,MACpC,OAFuB,EACfvB,KADe,EACTC,QADS,EACAC,K,EAI3B+B,gCAAkC,WAAO,IAC7BjC,EAAS,EAAKuB,MAAdvB,KACR,OAAOA,EAAOkC,KAAKC,MAAOnC,EAAO,EAAKgC,qBAAwB,KAAO,G,uDAI/D,IAAD,EACyBI,KAAKb,MAA3BvB,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACjBC,EAAQiC,KAAKJ,qBACb5B,EAAmBgC,KAAKH,kCAE9B,OACI,sBAAK5B,UAAWC,IAAE+B,SAAlB,UACI,cAAC,EAAD,CAAS5B,MAAO,wBAAhB,SACI,cAAC,EAAD,CACIG,QALA,CAAC,OAAQ,MAAO,WAMhBC,kBAAmBuB,KAAKZ,oBAMhC,cAAC,EAAD,CAASf,MAAO,aAAhB,SACKN,EAAS,cAAC,EAAD,CAChBH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,iBAAkBA,IAGpB,cAAC,EAAD,CAAciB,QAAQ,+B,GArDXiB,aCSRC,MAbf,WACE,OACG,8BAEI,cAAC,EAAD,OCKMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,8BAA8B,KAAO,gC,kBCA9DD,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,SAAW,8B","file":"static/js/main.4ccd2dff.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => (\r\n    \r\n        \r\n                    <ul className={s.list}>\r\n                        <li><p>Good: {good} </p></li>\r\n                        <li><p>Neutral: {neutral} </p></li>\r\n                        <li><p>Bad: {bad} </p></li>\r\n                        <li><p>Total: {total} </p></li>\r\n                        <li><p>Positive feedback: {positiveFeedback}%</p></li>\r\n                    </ul>\r\n                \r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedbackPercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css'\r\n\r\nconst FeedbackOptions = ({ options, onFeedbackCounter }) => (\r\n    \r\n        \r\n    <ul className={s.list}>\r\n        {options.map(option => (\r\n      <button\r\n        className={s.item}\r\n        type=\"button\"\r\n        data-action={option}\r\n        onClick={onFeedbackCounter}\r\n        key={option}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n                    </ul>\r\n                \r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onFeedbackCounter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <p>{message}</p>\r\n);\r\n\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, {Component} from 'react';\r\nimport Statistics from './Statistics/Statistics'\r\nimport Section from './Section/Section'\r\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions'\r\nimport Notification from './Notification/Notification'\r\nimport s from './Feedback.module.css'\r\n\r\nclass Feedback extends Component {\r\n\r\n    state = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0\r\n    }\r\n    \r\n    feedbackCounter = (e) => {\r\n        const currentFeedback = e.target.dataset.action\r\n       \r\n        this.setState(prevState => {\r\n            return { [currentFeedback]: prevState[currentFeedback] + 1 };\r\n    })\r\n\r\n    }\r\n\r\n    countTotalFeedback = () => {\r\n        const { good, neutral, bad } = this.state;\r\n        return (good + neutral + bad)\r\n    }\r\n    \r\n    countPositiveFeedbackPercentage = () => {\r\n        const { good } = this.state;\r\n        return good ? Math.round((good / this.countTotalFeedback()) * 100) : 0\r\n    }\r\n\r\n\r\n    render() {\r\n        const { good, neutral, bad} = this.state;\r\n        const total = this.countTotalFeedback()\r\n        const positiveFeedback = this.countPositiveFeedbackPercentage()\r\n        const options = ['good', 'bad', 'neutral']\r\n        return (\r\n            <div className={s.feedback}>\r\n                <Section title={'Please leave feedback'}>\r\n                    <FeedbackOptions\r\n                        options={options}\r\n                        onFeedbackCounter={this.feedbackCounter}\r\n                    />\r\n                \r\n                \r\n</Section>\r\n                \r\n                <Section title={'Statistics'}>\r\n                    {total ? (<Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positiveFeedback={positiveFeedback}\r\n              \r\n                    />) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n                \r\n                    </Section>\r\n            \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Feedback","import React from 'react';\nimport Feedback from './components/Feedback/Feedback'\n\nfunction App() {\n  return (\n     <div>\n      \n         <Feedback\n        />\n      \n      \n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__1yuIy\",\"item\":\"FeedbackOptions_item__38pHm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3Ys58\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedback\":\"Feedback_feedback__2RWBt\"};"],"sourceRoot":""}